
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_jops_examples/chapter_2/plot_peffdim.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_jops_examples_chapter_2_plot_peffdim.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_jops_examples_chapter_2_plot_peffdim.py:


Effective dimension with increased penalization
===============================================

.. GENERATED FROM PYTHON SOURCE LINES 7-70



.. image-sg:: /auto_jops_examples/chapter_2/images/sphx_glr_plot_peffdim_001.png
   :alt: Effective dimensions, across penalty order
   :srcset: /auto_jops_examples/chapter_2/images/sphx_glr_plot_peffdim_001.png
   :class: sphx-glr-single-img





.. code-block:: Python


    import numpy as np
    import matplotlib.pyplot as plt
    import pandas as pd

    from pyspline.psplines import PSplines


    # Get the data
    data = pd.read_csv("../data/mcycle.csv").dropna()
    times = data["times"].to_numpy()
    accel = data["accel"].to_numpy()


    # Loops for log(lambda) and order d
    lambdas = np.arange(-5, 5.1, 0.1)
    llambdas = 10**lambdas

    ED_1 = np.zeros_like(llambdas)
    for idx, lamb in enumerate(llambdas):
        ps = PSplines(
            penalty=(lamb,), n_segments=(20,), degree=(3,), order_penalty=1
        )
        ps.fit(
            X=times.reshape(-1, 1), y=accel, domains=(np.min(times), np.max(times))
        )
        ED_1[idx] = ps.diagnostics_["eff_dimension"]

    ED_2 = np.zeros_like(llambdas)
    for idx, lamb in enumerate(llambdas):
        ps = PSplines(
            penalty=(lamb,), n_segments=(20,), degree=(3,), order_penalty=2
        )
        ps.fit(
            X=times.reshape(-1, 1), y=accel, domains=(np.min(times), np.max(times))
        )
        ED_2[idx] = ps.diagnostics_["eff_dimension"]

    ED_3 = np.zeros_like(llambdas)
    for idx, lamb in enumerate(llambdas):
        ps = PSplines(
            penalty=(lamb,), n_segments=(20,), degree=(3,), order_penalty=3
        )
        ps.fit(
            X=times.reshape(-1, 1), y=accel, domains=(np.min(times), np.max(times))
        )
        ED_3[idx] = ps.diagnostics_["eff_dimension"]


    # Build the graph
    plt.figure(figsize=(6, 4), dpi=300)
    plt.plot(lambdas, ED_1, zorder=4, linestyle="solid", label="1")
    plt.plot(lambdas, ED_2, zorder=4, linestyle="dashed", label="2")
    plt.plot(lambdas, ED_3, zorder=4, linestyle="dotted", label="3")
    plt.axhline(y=0, color="k", linewidth=0.2, zorder=3)
    plt.ylim((-1, 25))

    plt.title("Effective dimensions, across penalty order")
    plt.xlabel("log10($\lambda$)")
    plt.ylabel("ED")
    plt.grid(linestyle="-", color="#EEEEEE", zorder=0)
    plt.legend(title="Order penalty")
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.705 seconds)


.. _sphx_glr_download_auto_jops_examples_chapter_2_plot_peffdim.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_peffdim.ipynb <plot_peffdim.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_peffdim.py <plot_peffdim.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
